{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/cqrs","result":{"data":{"post":{"slug":"/cqrs","title":"Command and Query Responsibility Segregation","date":"05.06.2022","tags":[{"name":"CQRS","slug":"cqrs"},{"name":"Cloud","slug":"cloud"},{"name":"Design Patterns","slug":"design-patterns"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Command and Query Responsibility Segregation\",\n  \"date\": \"2022-06-05T00:00:00.000Z\",\n  \"slug\": \"/cqrs\",\n  \"tags\": [\"CQRS\", \"Cloud\", \"Design Patterns\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"WIP\"), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"CQRS describes splitting responsibility for providing write behaviour and read behaviour into two separate systems. This allows for more intelligent scalability as resource for either read of write systems can be increased independently leading to optimised performance and cost management.\"), mdx(\"h2\", null, \"What does it look like?\"), mdx(\"p\", null, \"This depends on your overall architecture. CQRS lends itself to event-driven solutions as events can natively double as commands without the need for a separate concept.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"When a store containing these events is being used as the primary information store, having some kind of read store can mitigate the necessity for spinning up read models in memory for each query as this can take time and be compute intensive.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Implementing CQRS in this case requires an understanding of how the read data store will be used and what queries will be common. These are important questions to ask early on as the answers will affect your choices moving forward.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"For example, these decisions may influence your choice of db (NOSQL, relational, graph), your indexing, and potentially shard keys.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"I want to break these questions down a bit more:  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"How will the read data store be used?\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"This is distinctly different from the question below. You need to understand what requirements you have of the data in this read store. When implementing a separate read store, data is only ever eventually consistent. This means that any operations that rely on the data being fully accurate and up-to-date will not be satisfied. However, for a quick query to demonstrate trends in historic data, there's no problem.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"What queries will be common?\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"This will likely result in an array of answers. That's good! That will give you the basis off of which to produce the fields for your state model. \")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"WIP Summary CQRS describes splitting responsibility for providing write behaviour and read behaviour into two separate systems. This allowsâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/cqrs","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}